local min_x = 0
local min_y = 0

local max_x = 960
local max_y = 640

local min_velocity = 100
local max_velocity = 300

local function get_finish_point(self)
  local current_position = go.get_position()

  local tx
  if self.current_direction.x < 0 then
    tx = (min_x - current_position.x) / self.current_direction.x
  elseif 0 < self.current_direction.x then
    tx = (max_x - current_position.x) / self.current_direction.x
  end

  local ty
  if self.current_direction.y < 0 then
    ty = (min_y - current_position.y) / self.current_direction.y
  elseif 0 < self.current_direction.y then
    ty = (max_y - current_position.y) / self.current_direction.y
  end

  if tx and ty then
    local t = math.min(tx, ty)
    current_position.x = current_position.x + t * self.current_direction.x
    current_position.y = current_position.y + t * self.current_direction.y
    return current_position, t
  elseif tx then
    local t = tx
    current_position.x = current_position.x + t * self.current_direction.x
    current_position.y = current_position.y + t * self.current_direction.y
    return current_position, t
  else
    local t = ty
    current_position.x = current_position.x + t * self.current_direction.x
    current_position.y = current_position.y + t * self.current_direction.y
    return current_position, t
  end

end

local function bounce_off(self)
  local current_position = go.get_position()
  local dx = math.min(current_position.x - min_x, max_x - current_position.x)
  local dy = math.min(current_position.y - min_y, max_y - current_position.y)
  if dx < dy then
    self.current_direction.x = -self.current_direction.x
  else
    self.current_direction.y = -self.current_direction.y
  end

  local finish_point, duration = get_finish_point(self)
  go.animate('.', 'position', go.PLAYBACK_ONCE_FORWARD, finish_point, go.EASING_LINEAR, duration, 0, bounce_off)
end

function init(self)
  self.current_direction = vmath.vector3(math.random() - 0.5, math.random() - 0.5, 0)
  self.current_direction = vmath.normalize(self.current_direction) * math.random(min_velocity, max_velocity)

  local finish_point, duration = get_finish_point(self)
  go.animate('.', 'position', go.PLAYBACK_ONCE_FORWARD, finish_point, go.EASING_LINEAR, duration, 0, bounce_off)
end
